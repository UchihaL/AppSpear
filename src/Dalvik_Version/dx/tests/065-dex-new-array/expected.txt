Blort.test1:()[Z:
regs: 0003; ins: 0001; outs: 0000
  0000: move-object v0, v2
  0001: const/4 v1, #int 1 // #1
  0002: new-array v1, v1, boolean[]
  0004: move-object v0, v1
  0005: return-object v0
Blort.test2:()[B:
regs: 0003; ins: 0001; outs: 0000
  0000: move-object v0, v2
  0001: const/4 v1, #int 1 // #1
  0002: new-array v1, v1, byte[]
  0004: move-object v0, v1
  0005: return-object v0
Blort.test3:()[S:
regs: 0003; ins: 0001; outs: 0000
  0000: move-object v0, v2
  0001: const/4 v1, #int 1 // #1
  0002: new-array v1, v1, short[]
  0004: move-object v0, v1
  0005: return-object v0
Blort.test4:()[C:
regs: 0003; ins: 0001; outs: 0000
  0000: move-object v0, v2
  0001: const/4 v1, #int 1 // #1
  0002: new-array v1, v1, char[]
  0004: move-object v0, v1
  0005: return-object v0
Blort.test5:()[I:
regs: 0003; ins: 0001; outs: 0000
  0000: move-object v0, v2
  0001: const/4 v1, #int 1 // #1
  0002: new-array v1, v1, int[]
  0004: move-object v0, v1
  0005: return-object v0
Blort.test6:()[J:
regs: 0003; ins: 0001; outs: 0000
  0000: move-object v0, v2
  0001: const/4 v1, #int 1 // #1
  0002: new-array v1, v1, long[]
  0004: move-object v0, v1
  0005: return-object v0
Blort.test7:()[F:
regs: 0003; ins: 0001; outs: 0000
  0000: move-object v0, v2
  0001: const/4 v1, #int 1 // #1
  0002: new-array v1, v1, float[]
  0004: move-object v0, v1
  0005: return-object v0
Blort.test8:()[D:
regs: 0003; ins: 0001; outs: 0000
  0000: move-object v0, v2
  0001: const/4 v1, #int 1 // #1
  0002: new-array v1, v1, double[]
  0004: move-object v0, v1
  0005: return-object v0
Blort.test9:()[Ljava/lang/Object;:
regs: 0003; ins: 0001; outs: 0000
  0000: move-object v0, v2
  0001: const/4 v1, #int 1 // #1
  0002: new-array v1, v1, java.lang.Object[]
  0004: move-object v0, v1
  0005: return-object v0
