Blort.blort:(DD)V:
regs: 000f; ins: 0005; outs: 0000
  0000: move-object v0, v10
  0001: move-wide v1, v11
  0002: move-wide v3, v13
  0003: move-object v5, v0
  0004: move-wide v6, v1
  0005: neg-double v6, v6
  0006: iput-wide v6, v5, Blort.d:D
  0008: move-object v5, v0
  0009: move-wide v6, v1
  000a: move-wide v8, v3
  000b: add-double/2addr v6, v8
  000c: iput-wide v6, v5, Blort.d:D
  000e: move-object v5, v0
  000f: move-wide v6, v1
  0010: move-wide v8, v3
  0011: sub-double/2addr v6, v8
  0012: iput-wide v6, v5, Blort.d:D
  0014: move-object v5, v0
  0015: move-wide v6, v1
  0016: move-wide v8, v3
  0017: mul-double/2addr v6, v8
  0018: iput-wide v6, v5, Blort.d:D
  001a: move-object v5, v0
  001b: move-wide v6, v1
  001c: move-wide v8, v3
  001d: div-double/2addr v6, v8
  001e: iput-wide v6, v5, Blort.d:D
  0020: move-object v5, v0
  0021: move-wide v6, v1
  0022: move-wide v8, v3
  0023: rem-double/2addr v6, v8
  0024: iput-wide v6, v5, Blort.d:D
  0026: return-void
Blort.blort:(FF)V:
regs: 0009; ins: 0003; outs: 0000
  0000: move-object v0, v6
  0001: move v1, v7
  0002: move v2, v8
  0003: move-object v3, v0
  0004: move v4, v1
  0005: neg-float v4, v4
  0006: iput v4, v3, Blort.f:F
  0008: move-object v3, v0
  0009: move v4, v1
  000a: move v5, v2
  000b: add-float/2addr v4, v5
  000c: iput v4, v3, Blort.f:F
  000e: move-object v3, v0
  000f: move v4, v1
  0010: move v5, v2
  0011: sub-float/2addr v4, v5
  0012: iput v4, v3, Blort.f:F
  0014: move-object v3, v0
  0015: move v4, v1
  0016: move v5, v2
  0017: mul-float/2addr v4, v5
  0018: iput v4, v3, Blort.f:F
  001a: move-object v3, v0
  001b: move v4, v1
  001c: move v5, v2
  001d: div-float/2addr v4, v5
  001e: iput v4, v3, Blort.f:F
  0020: move-object v3, v0
  0021: move v4, v1
  0022: move v5, v2
  0023: rem-float/2addr v4, v5
  0024: iput v4, v3, Blort.f:F
  0026: return-void
Blort.blort:(II)V:
regs: 0009; ins: 0003; outs: 0000
  0000: move-object v0, v6
  0001: move v1, v7
  0002: move v2, v8
  0003: move-object v3, v0
  0004: move v4, v1
  0005: neg-int v4, v4
  0006: iput v4, v3, Blort.i:I
  0008: move-object v3, v0
  0009: move v4, v1
  000a: const/4 v5, #int -1 // #f
  000b: xor-int/lit8 v4, v4, #int -1 // #ff
  000d: iput v4, v3, Blort.i:I
  000f: move-object v3, v0
  0010: move v4, v1
  0011: move v5, v2
  0012: add-int/2addr v4, v5
  0013: iput v4, v3, Blort.i:I
  0015: move-object v3, v0
  0016: move v4, v1
  0017: move v5, v2
  0018: sub-int/2addr v4, v5
  0019: iput v4, v3, Blort.i:I
  001b: move-object v3, v0
  001c: move v4, v1
  001d: move v5, v2
  001e: mul-int/2addr v4, v5
  001f: iput v4, v3, Blort.i:I
  0021: move-object v3, v0
  0022: move v4, v1
  0023: move v5, v2
  0024: div-int/2addr v4, v5
  0025: iput v4, v3, Blort.i:I
  0027: move-object v3, v0
  0028: move v4, v1
  0029: move v5, v2
  002a: rem-int/2addr v4, v5
  002b: iput v4, v3, Blort.i:I
  002d: move-object v3, v0
  002e: move v4, v1
  002f: move v5, v2
  0030: and-int/2addr v4, v5
  0031: iput v4, v3, Blort.i:I
  0033: move-object v3, v0
  0034: move v4, v1
  0035: move v5, v2
  0036: or-int/2addr v4, v5
  0037: iput v4, v3, Blort.i:I
  0039: move-object v3, v0
  003a: move v4, v1
  003b: move v5, v2
  003c: xor-int/2addr v4, v5
  003d: iput v4, v3, Blort.i:I
  003f: move-object v3, v0
  0040: move v4, v1
  0041: move v5, v2
  0042: shl-int/2addr v4, v5
  0043: iput v4, v3, Blort.i:I
  0045: move-object v3, v0
  0046: move v4, v1
  0047: move v5, v2
  0048: shr-int/2addr v4, v5
  0049: iput v4, v3, Blort.i:I
  004b: move-object v3, v0
  004c: move v4, v1
  004d: move v5, v2
  004e: ushr-int/2addr v4, v5
  004f: iput v4, v3, Blort.i:I
  0051: return-void
Blort.blort:(JJ)V:
regs: 000f; ins: 0005; outs: 0000
  0000: move-object v0, v10
  0001: move-wide v1, v11
  0002: move-wide v3, v13
  0003: move-object v5, v0
  0004: move-wide v6, v1
  0005: neg-long v6, v6
  0006: iput-wide v6, v5, Blort.l:J
  0008: move-object v5, v0
  0009: move-wide v6, v1
  000a: const-wide/16 v8, #long -1 // #ffff
  000c: xor-long/2addr v6, v8
  000d: iput-wide v6, v5, Blort.l:J
  000f: move-object v5, v0
  0010: move-wide v6, v1
  0011: move-wide v8, v3
  0012: add-long/2addr v6, v8
  0013: iput-wide v6, v5, Blort.l:J
  0015: move-object v5, v0
  0016: move-wide v6, v1
  0017: move-wide v8, v3
  0018: sub-long/2addr v6, v8
  0019: iput-wide v6, v5, Blort.l:J
  001b: move-object v5, v0
  001c: move-wide v6, v1
  001d: move-wide v8, v3
  001e: mul-long/2addr v6, v8
  001f: iput-wide v6, v5, Blort.l:J
  0021: move-object v5, v0
  0022: move-wide v6, v1
  0023: move-wide v8, v3
  0024: div-long/2addr v6, v8
  0025: iput-wide v6, v5, Blort.l:J
  0027: move-object v5, v0
  0028: move-wide v6, v1
  0029: move-wide v8, v3
  002a: rem-long/2addr v6, v8
  002b: iput-wide v6, v5, Blort.l:J
  002d: move-object v5, v0
  002e: move-wide v6, v1
  002f: move-wide v8, v3
  0030: and-long/2addr v6, v8
  0031: iput-wide v6, v5, Blort.l:J
  0033: move-object v5, v0
  0034: move-wide v6, v1
  0035: move-wide v8, v3
  0036: or-long/2addr v6, v8
  0037: iput-wide v6, v5, Blort.l:J
  0039: move-object v5, v0
  003a: move-wide v6, v1
  003b: move-wide v8, v3
  003c: xor-long/2addr v6, v8
  003d: iput-wide v6, v5, Blort.l:J
  003f: move-object v5, v0
  0040: move-wide v6, v1
  0041: move-wide v8, v3
  0042: long-to-int v8, v8
  0043: shl-long/2addr v6, v8
  0044: iput-wide v6, v5, Blort.l:J
  0046: move-object v5, v0
  0047: move-wide v6, v1
  0048: move-wide v8, v3
  0049: long-to-int v8, v8
  004a: shr-long/2addr v6, v8
  004b: iput-wide v6, v5, Blort.l:J
  004d: move-object v5, v0
  004e: move-wide v6, v1
  004f: move-wide v8, v3
  0050: long-to-int v8, v8
  0051: ushr-long/2addr v6, v8
  0052: iput-wide v6, v5, Blort.l:J
  0054: return-void
